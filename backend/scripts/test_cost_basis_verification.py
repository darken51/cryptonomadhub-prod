"""
Test de v√©rification Cost Basis en base de donn√©es
"""
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import SessionLocal
from app.models.cost_basis import CostBasisLot, CostBasisDisposal
from sqlalchemy import inspect, text


def test_cost_basis_verification():
    """V√©rification Cost Basis en DB"""

    db = SessionLocal()

    try:
        print("=" * 70)
        print(" TEST 9: V√©rification Cost Basis".center(70))
        print("=" * 70)

        # Compter les lots
        total_lots = db.query(CostBasisLot).count()
        print(f"\n‚ÑπÔ∏è  Total lots: {total_lots}")

        # Compter les disposals
        total_disposals = db.query(CostBasisDisposal).count()
        print(f"‚ÑπÔ∏è  Total disposals: {total_disposals}")

        # V√©rifier les lots r√©cents
        recent_lots = db.query(CostBasisLot).order_by(
            CostBasisLot.created_at.desc()
        ).limit(5).all()

        print(f"\nüì¶ Lots r√©cents:")
        for lot in recent_lots:
            print(f"  ‚Ä¢ {lot.token}: {lot.original_amount} @ ${lot.acquisition_price_usd}")

        # V√©rifier les types de colonnes (doivent √™tre Numeric)
        inspector = inspect(db.bind)
        columns = inspector.get_columns('cost_basis_lots')

        print(f"\nüî¢ Types de colonnes:")
        all_numeric = True
        for col in columns:
            if col['name'] in ['acquisition_price_usd', 'original_amount', 'remaining_amount', 'disposed_amount']:
                col_type = str(col['type'])
                is_numeric = 'NUMERIC' in col_type.upper()
                emoji = "‚úÖ" if is_numeric else "‚ùå"
                print(f"  {emoji} {col['name']}: {col_type}")
                if not is_numeric:
                    all_numeric = False

        # V√©rifier les contraintes CHECK
        result = db.execute(text("""
            SELECT constraint_name, check_clause
            FROM information_schema.check_constraints
            WHERE constraint_name LIKE 'check_%'
            ORDER BY constraint_name;
        """))

        print(f"\nüîí Contraintes CHECK:")
        constraints = list(result)
        if constraints:
            for row in constraints:
                print(f"  ‚úÖ {row[0]}: {row[1]}")
            print(f"\n‚úÖ {len(constraints)} contraintes actives")
        else:
            print("  ‚ö†Ô∏è  Aucune contrainte CHECK trouv√©e")

        # V√©rifier qu'il n'y a plus de lots invalides
        invalid_lots = db.query(CostBasisLot).filter(
            CostBasisLot.acquisition_price_usd == 0
        ).count()

        print(f"\nüßπ V√©rification nettoyage:")
        if invalid_lots == 0:
            print(f"  ‚úÖ Aucun lot avec prix=0")
        else:
            print(f"  ‚ùå {invalid_lots} lots avec prix=0 trouv√©s!")

        # V√©rifier les disposals avec tx_hash
        disposals_with_hash = db.query(CostBasisDisposal).filter(
            CostBasisDisposal.disposal_tx_hash != None
        ).count()

        print(f"\nüîó Tra√ßabilit√©:")
        print(f"  ‚ÑπÔ∏è  Disposals avec tx_hash: {disposals_with_hash}/{total_disposals}")

        # R√©sum√©
        print("\n" + "=" * 70)
        if all_numeric and invalid_lots == 0 and len(constraints) >= 4:
            print("‚úÖ VERIFICATION COST BASIS: TOUS LES TESTS PASSENT")
            return True
        else:
            print("‚ö†Ô∏è  VERIFICATION COST BASIS: QUELQUES PROBLEMES DETECTES")
            return False

    except Exception as e:
        print(f"\n‚ùå Erreur v√©rification: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        db.close()


if __name__ == "__main__":
    success = test_cost_basis_verification()
    sys.exit(0 if success else 1)
